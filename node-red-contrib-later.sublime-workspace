{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"httpAdm",
				"httpAdmin"
			],
			[
				"httpAdmi",
				"httpAdminRoot"
			],
			[
				"mode",
				"module.parent"
			],
			[
				"margin-",
				"margin-left"
			],
			[
				"debugSockRec",
				"debugSockDevsRec"
			],
			[
				"for",
				"for	for (…) {…}"
			],
			[
				"debugSockD",
				"debugSockDevsRec"
			],
			[
				"remote",
				"socket.remoteAddress"
			],
			[
				"commsSo",
				"commsSock"
			],
			[
				"loc",
				"socket.localPort"
			],
			[
				"unmount",
				"unmounted"
			],
			[
				"debugSo",
				"debugSockEmit"
			],
			[
				"debugSock",
				"debugSockDevs"
			],
			[
				"socket",
				"socket.address"
			],
			[
				"add",
				"server.address"
			],
			[
				"address",
				"socket.address"
			],
			[
				"createS",
				"net.createServer"
			],
			[
				"remo",
				"removeAllListeners"
			],
			[
				"chen",
				"chunkLen"
			],
			[
				"k",
				"keyTag"
			],
			[
				"K",
				"keyTag"
			],
			[
				"pin",
				"pingRe"
			],
			[
				"this",
				"thisLine"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"command_palette":
	{
		"height": 369.0,
		"selected_items":
		[
			[
				"Pack",
				"Package Control: Install Package"
			],
			[
				"Pa",
				"Package Control: Install Package"
			],
			[
				"package co",
				"Package Control: Add Channel"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 561.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			" import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/deano/github/node-red-contrib-later"
	],
	"file_history":
	[
		"/home/deano/github/node-red/node-red-fork.sublime-project",
		"/home/deano/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/deano/.config/sublime-text-3/Packages/User/JavaScript.sublime-settings",
		"/home/deano/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/deano/Dropbox/Autom8-2/scratchbook/node_modules/node-red/red/server.js",
		"/home/deano/Dropbox/Autom8-2/scratchbook/node_modules/node-red/red/red.js",
		"/home/deano/Dropbox/Autom8-2/scratchbook/node_modules/node-red/package.json",
		"/home/deano/Dropbox/Autom8-2/scratchbook/package.json",
		"/home/deano/Dropbox/Autom8-2/scratchbook/public/node-red/.config.json",
		"/home/deano/.node-red/settings.js",
		"/home/deano/Dropbox/Minimal Sync/Node-red/Deano_flows.json",
		"/home/deano/Dropbox/WebRelay/x310Streamer/lib/mounter.js",
		"/home/deano/Dropbox/WebRelay/x310Streamer/lib/wWatchTransform.js",
		"/home/deano/Dropbox/WebRelay/x310Streamer/lib/wTransformX310.js",
		"/home/deano/Dropbox/WebRelay/autom8/views/debug.jade",
		"/home/deano/Dropbox/WebRelay/autom8/views/index.jade",
		"/home/deano/Dropbox/WebRelay/autom8/views/layout.jade",
		"/home/deano/Dropbox/WebRelay/autom8/public/stylesheets/raw_io.styl",
		"/home/deano/Dropbox/WebRelay/autom8/views/raw_mounts.jade",
		"/home/deano/Dropbox/WebRelay/autom8/app.js",
		"/home/deano/nodes/data-test/data-test.js",
		"/home/deano/Dropbox/WebRelay/x310Streamer/lib/rTransformX310.js"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"sendend",
			".\n",
			"socket",
			"Mounter.prototype._newConnection = function  (socket) {\n	var self = this;\n\n	debug('New connection.', socket.remoteAddress, socket.localPort);\n\n	//Add some properties to the socket object that hold the command and data\n	//streams for the x310 socket. Also a stream that parses out the path(s)\n	//from the data stream. Allows for the device to mount itself.\n	socket['x310'] = {};\n	socket.x310['cmdStream'] = new WStream;\n	var x310Mounter = new RStream({writer: socket.x310.cmdStream});\n\n	//There is a timeout for the connection.\n	//You have a 30 secs from connect to have sent a valid mount path.\n	socket.setTimeout((self._opts.mountTime || 30) * 1000, function  () {\n		debug('Socket timed out before mounting.', socket.remoteAddress);\n		socket.end('No mount\\r\\n');\n	});\n\n	socket.on('error', function  (e) {\n		debug('Socket error.', e);\n	});\n\n	socket.on('close', function  () {\n		var mntPath = socket.x310.mntPath,\n			mntIp = socket.x310.mntIp;\n\n		debug('Close called.', mntPath, mntIp);\n		self._unMount(socket);\n	});\n\n	//Pipe the socket data into the mount parser.\n	socket.pipe(x310Mountchecksummschecksummser);\n	//Pipe the command stream back into the socket\n	socket.x310.cmdStream.pipe(socket);\n\n	x310Mounter.on('mount', function  (path) {\n		if ( self._mounted_paths[path] ) {\n			var oldSock = self._mounted_paths[path].socket;\n			debug('New mount req on used path.', path, oldSock.remoteAddress);\n			self._unMount(oldSock);\n		}\n		self._mounted_paths[path] = socket.x310;\n		socket.removeAllListeners('timeout');\n		socket.setTimeout((self._opts.idleTime || 120) * 1000, function  () {\n			debug('Idle timeout.', socket.remoteAddress);\n			self._unMount(socket);\n		});\n		//Don't start piping data through the parser UNTIL you have a\n		//mount path.\n		socket.x310['dataStream'] = new DStream({mnt: path, ip: socket.remoteAddress});\n		x310Mounter.pipe(socket.x310.dataStream);\n		debug('Mount event.', path, socket.remoteAddress);\n		socket.x310['mntPath'] = path;\n		socket.x310['mntIp'] = socket.remoteAddress;\n		socket.x310['socket'] = socket;\n		self.emit('mount', socket.x310);\n	});\n};\n",
			"'\n",
			"wstream",
			"rstream"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "node-red-contrib-later.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 173.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
